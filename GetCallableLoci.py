# @author: Judith Vlaar + Freek Manders
# @date: Febuary 2018
# @description: Get callable loci and intersect them for trios.

import re
import os
from collections import defaultdict
import argparse

parser = argparse.ArgumentParser(description = "This script extracts the loci that were 'Callable' in all members in a parent-offspring trio These loci are extracted from bed files generated by GATKs CallableLoci.")
parser.add_argument("-f", "--FILELIST", default = "/hpc/cog_bioinf/cuppen/project_data/Freek_SNV/FilelistFreek.txt", help = "The file list")
parser.add_argument("-o", "--OUTPUT_PATH", default = "/hpc/cog_bioinf/cuppen/project_data/Freek_SNV", help = "The output path")
parser.add_argument("-w", "--OVERWRITE", default = "False", help = "Overwrite the results if they already exist.")
args = parser.parse_args()

filelist = args.FILELIST
outdir = "{0}/CallableLoci/Output".format(args.OUTPUT_PATH)

callables = defaultdict(list)
with open(filelist) as f1:
	header = 0
	for line in f1:
		if header == 0:
			header = 1
			continue
		line = line.rstrip()
		columns = line.split("\t")
		sample = columns[5]
		folder = columns[1]
		family = columns[3]
# Select for the "CALLABLE" regions in the <sample>.callableloci.bed files. First checks if the output file already exists. Then checks if the input bed file exists as a flat bed. If not,  it checks for a compressed bed file.
		CallableLoci = "{0}/{1}/{1}_CallableLoci.bed".format(folder, sample)
		Selected_CallableLoci = "{0}/{1}_selected_CallableLoci.bed".format(outdir, sample)
		if not os.path.isfile(Selected_CallableLoci) or args.OVERWRITE == "true":
			if os.path.isfile(CallableLoci):
				command = "grep 'CALLABLE' {0} > {1}".format(CallableLoci, Selected_CallableLoci)
			else:
				CallableLoci = "{0}.gz".format(CallableLoci)
				if os.path.isfile(CallableLoci):
								command = "zgrep 'CALLABLE' {0} > {1}".format(CallableLoci, Selected_CallableLoci)
				else:
					print "Callable loci file does not exist"
					continue
		
			os.system(command)
		callables[family].append(Selected_CallableLoci) #A dictionary with the families as keys and a list of the bed files with only callable regions (output from previous step) as the values.

#Intersect the callableloci.bed files.
for famid in callables.keys():
	fam = callables[famid]
	if len(fam) == 3:
		father, mother, child = fam
		intersectedLoci = "{0}/{1}_intersect_CallableLoci.bed".format(outdir, famid)
		if os.path.isfile(father) and os.path.isfile(mother) and os.path.isfile(child) and (not os.path.isfile(intersectedLoci) or args.OVERWRITE == "true"):
			print "intersecting: {0}".format(famid)
			command = "intersectBed -a {0} -b {1} | intersectBed -a - -b {2} > {3}".format(child, father, mother, intersectedLoci)
			os.system(command)
	
	#Family 14 has 3 children. This creates an intersected bedfile for each kid parents trio.
	if len(fam) == 5:
		father, mother, child1, child2, child3 = fam
		intersectedLoci1 = "{0}/{1}_child1_intersect_CallableLoci.bed".format(outdir, famid)
		intersectedLoci2 = "{0}/{1}_child2_intersect_CallableLoci.bed".format(outdir, famid)
		intersectedLoci3 = "{0}/{1}_child3_intersect_CallableLoci.bed".format(outdir, famid)
		if os.path.isfile(father) and os.path.isfile(mother) and os.path.isfile(child1) and (not os.path.isfile(intersectedLoci1) or args.OVERWRITE == "true"):
			print "intersecting: {0}: child 1".format(famid)
			command = "intersectBed -a {0} -b {1} | intersectBed -a - -b {2} > {3}".format(child1, father, mother, intersectedLoci1)
			os.system(command)
		if os.path.isfile(father) and os.path.isfile(mother) and os.path.isfile(child2) and (not os.path.isfile(intersectedLoci2) or args.OVERWRITE == "true"):
			print "intersecting: {0}: child 2".format(famid)
			command = "intersectBed -a {0} -b {1} | intersectBed -a - -b {2} > {3}".format(child2, father, mother, intersectedLoci2)
			os.system(command)
		if os.path.isfile(father) and os.path.isfile(mother) and os.path.isfile(child3) and (not os.path.isfile(intersectedLoci3) or args.OVERWRITE == "true"):
			print "intersecting: {0}: child 3".format(famid)
			command = "intersectBed -a {0} -b {1} | intersectBed -a - -b {2} > {3}".format(child3, father, mother, intersectedLoci3)
			os.system(command)

