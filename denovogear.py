import os
import re
import fileinput
import numpy as np
import pandas as pd
import argparse
import datetime
from timeit import default_timer as timer

###Start timer
start = timer()
time = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M")
print "Start running script at: {0}".format(time)

###Parse arguments
parser = argparse.ArgumentParser(description = "This script extracts the loci that were 'Callable' in all members in a parent-offspring trio These loci are extracted from bed files generated by GATKs CallableLoci.")
parser.add_argument("-f", "--FILELIST", default = "/hpc/cog_bioinf/cuppen/project_data/Freek_SNV/FilelistFreek.txt", help = "The file list")
parser.add_argument("-o", "--OUTPUT_PATH", default = "/hpc/cog_bioinf/cuppen/project_data/Freek_SNV", help = "The output path")
parser.add_argument("-w", "--OVERWRITE", default = "False", help = "Overwrite the results if they already exist.")
parser.add_argument("--SNPSIFT", default = "/hpc/local/CentOS7/cog_bioinf/snpEff_v4.1h/SnpSift.jar", help = "The location of the snpsift jar.")
parser.add_argument("--DENOVOGEAR", default = "/hpc/cog_bioinf/cuppen/project_data/Freek_SNV/Downloaded_software/Denovogear/denovogear-v1.1.1-Linux-x86_64/bin/dng", help = "The location of the denovogear program")
args = parser.parse_args()

filelist = args.FILELIST
outdir = "{0}/Characteristics_denovo/Denovogear".format(args.OUTPUT_PATH)
vcfdir = "{0}/Callableregion_NrMendelViols/CallableVCF".format(args.OUTPUT_PATH)
denovodir = "{0}/Callableregion_NrMendelViols/TrueDenovo/SNVs".format(args.OUTPUT_PATH)
snpsift = args.SNPSIFT
denovogear = args.DENOVOGEAR

#Determine samples from filelist			
samples = []
runs = {}
with open(filelist) as f1:
	next(f1)
	for line in f1:
		line = line.rstrip()
		columns = line.split("\t")
		sample = columns[0]
		run = columns[1]
		relation = columns[6]
		relation = relation.lower()
		if "child" in relation:
			samples.append(sample)	
			runs[sample] = run	
print "Finished reading the filelist"

#Create the dnm files for denovogear from the truedenovo vcf.
for sample in samples:	
	denovovcf = "{0}/{1}_Truedenovo.vcf".format(denovodir, sample)
	dnmf = "{0}/Dnm/{1}_dnm.txt".format(outdir, sample)
	if os.path.isfile(denovovcf) and (not os.path.isfile(dnmf) or args.OVERWRITE == "true"):
		command = """java -Xmx4G -jar {0} extractFields -s '\t' -e '.' {1} CHROM POS REF ALT | tail -n +2 > {2}""".format(snpsift, denovovcf, dnmf)
		os.system(command)
		print "Created dnm file for sample: {0}".format(sample)
print "Finished with creating the dnm files"

#Create the genotypes files for denovogear from the  vcf files with only callable regions. 
for sample in samples:
	vcf = "{0}/{1}_filtered_callable_annotated.recode.vcf".format(vcfdir, sample)
	snptable = "{0}/Snp_gt/{1}_snp_gt.txt".format(outdir, sample)
	if os.path.isfile(vcf) and (not os.path.isfile(snptable) or args.OVERWRITE == "true"):
		command = """java -Xmx4G -jar {0} extractFields -s ',' -e '.' {1} CHROM POS REF ALT GEN[2].GT GEN[0].GT GEN[1].GT > {2}""".format(snpsift, vcf, snptable)
		os.system(command)
		print "Created genotypes file for sample: {0}".format(sample)
print "Finished with the genotypes files"

#Create genotypes files with bases instead of the 0/1 format. These are created from the earlier genotypes files.
for sample in samples:
	snptable = "{0}/Snp_gt/{1}_snp_gt.txt".format(outdir, sample)
	snptablebases = "{0}/Snp_gt_bases/{1}_snp_gt_bases.txt".format(outdir, sample)
	if os.path.isfile(snptable) and (not os.path.isfile(snptablebases) or args.OVERWRITE == "true"):
		with open(snptablebases, "w") as snpsbases:
			snpsbases.write("#Chrom\tpos\tchild\tfather\tmother\n")
			with open(snptable) as snps:
				next(snps)
				for line in snps:
					incorrectgt = False
					line = line.rstrip()
					chrom, pos, ref, alt, gtchild, gtfather, gtmother = line.split("\t")
					if len(ref) != 1 or len(alt) != 1:
						continue
					bases = {}
					gts = {"child": gtchild, "father": gtfather, "mother": gtmother}
					for pers in gts.keys():
						if gts[pers] == "0/0":
							bases[pers] = ref + ref
						elif gts[pers] == "0/1":
							bases[pers] = ref + alt
						elif gts[pers] == "1/1":
							bases[pers] = alt + alt
						else:
							incorrectgt = True
					if incorrectgt == False:
						writeline = "\t".join([chrom, pos, bases["child"], bases["father"], bases["mother"]])
						snpsbases.write("{0}\n".format(writeline))		
		print "Created genotypes table with bases for sample: {0}".format(sample)
print "Finished with converting the genotypes files format so it contains actual bases"


#Run Denovogear phaser.
for sample in samples:
	dnmf = "{0}/Dnm/{1}_dnm.txt".format(outdir, sample)
	snptablebases = "{0}/Snp_gt_bases/{1}_snp_gt_bases.txt".format(outdir, sample)
	run = runs[sample]
	bam = "{0}/{1}-DNA-1/mapping/{1}-DNA-1_dedup.realigned.bam".format(run, sample)
	outdngear = "{0}/Denovogearout/{1}_denovogear.txt".format(outdir, sample)
	if os.path.isfile(dnmf) and os.path.isfile(snptablebases) and os.path.isfile(bam) and (not os.path.isfile(outdngear) or args.OVERWRITE == "true"):
		command = "{0} phaser --dnm {1} --pgt {2} --bam {3} > {4}".format(denovogear, dnmf, snptablebases, bam, outdngear)
		os.system(command)
		print "Ran denovogear for sample: {0}".format(sample)
print "Finished with running denovogear"

#Transform the denovogear output in a useful table
for sample in samples:
	denovogear = "{0}/Denovogearout/{1}_denovogear.txt".format(outdir, sample)
	denovotable = "{0}/Denovotables/{1}_denovogear.txt".format(outdir, sample)
	denovotablegz = "{0}.gz".format(denovotable)
	if os.path.isfile(denovogear) and not os.path.isfile(denovotable) and (not os.path.isfile(denovotablegz) or args.OVERWRITE == "true"):
		dnms = {}
		with open(denovogear) as dngear:
			for line in dngear:
				line = line.rstrip()
				if line.startswith("DNM_pos"):
					chrompos, inh, mut = line.split("\t")
					chrompos = re.sub(r"DNM_pos ", "", chrompos)
					chrom, pos = chrompos.split(":")
					inh = inh.split(" ")[1]
					mut = mut.split(" ")[1]
					dnms[chrompos] = {"chrom": chrom, "pos": pos, "inh": inh, "mut": mut, "readsfather": 0, "readsmother": 0, "nrhaps": 0, "readsbyhap": []}
				
				elif line.startswith("\tHAP POS"):
					line = line.split(" ")
					happos = line[2]
					hapnr = dnms[chrompos]["nrhaps"]
					dnms[chrompos]["nrhaps"] += 1
					dnms[chrompos]["readsbyhap"] += [0, 0]
				
				elif line.startswith("\t\tBase at DNM position:"):
					line = line.split(" ")
					infparent = line[16]
					reads = int(line[20])
					if infparent == "p1":
						dnms[chrompos]["readsfather"] += reads
						dnms[chrompos]["readsbyhap"][hapnr*2] += reads
					elif infparent == "p2":
						dnms[chrompos]["readsmother"] += reads
						dnms[chrompos]["readsbyhap"][hapnr*2 + 1] += reads
		
		#Filter on reads to determine parent of origin
		dnmst = pd.DataFrame(dnms)
		dnmst =  dnmst.transpose()
		
		dnmst["readsbyhap"] = dnmst["readsbyhap"].apply(lambda x: ".".join(map(str, x)))
		dnmst["readsbyhap"].replace("", "NA", inplace = True)
		dnmst["totalreads"] = dnmst["readsfather"] + dnmst["readsmother"]
		
		conditions =\
			[((dnmst["totalreads"] >= 5) | (dnmst["nrhaps"] >= 2)) & ((dnmst["readsfather"] / (dnmst["totalreads"] + 0.01)) > 0.8) & (dnmst["readsmother"] <= 10),\
			((dnmst["totalreads"] >= 5) | (dnmst["nrhaps"] >= 2)) & ((dnmst["readsmother"] / (dnmst["totalreads"] + 0.01)) > 0.8) & (dnmst["readsfather"] <= 10),\
			(dnmst["nrhaps"] == 0),\
			((dnmst["totalreads"] < 5) & (dnmst["nrhaps"] == 1))]
		
		choices = ["Father", "Mother", "Notphased", "Notenoughreadsandsnps"]
		dnmst["Parent"] = np.select(conditions, choices, default = "Ambiguous")
		
		#dnmst["chrompos"] = dnmst[["chrom", "pos"]].apply(lambda x: ":".join(x), axis = 1)
		dnmst = dnmst[["chrom", "pos", "Parent", "readsfather", "readsmother", "totalreads", "nrhaps", "readsbyhap"]]
		dnmst.to_csv(denovotable, sep = "\t", index = False, header = False)
		print "Transformed the denovogear output to a table to annotate the vcf for sample: {0}.".format(sample)
print "Finished with transforming the denovogear output to tables to annotate the vcfs."

#Use the denovogear output table to annotate the samples denovo snv vcf.
for sample in samples:
	denovotable = "{0}/Denovotables/{1}_denovogear.txt".format(outdir, sample)
	denovotablegz = "{0}.gz".format(denovotable)
	denovovcf = "{0}/{1}_Truedenovo.vcf".format(denovodir, sample)
	annhdr = "{0}/annotations.hdr".format(outdir)
	denovovcftemp = "{0}/{1}_Truedenovotemp.vcf".format(denovodir, sample)
	
	if os.path.isfile(denovotable) and os.path.isfile(denovovcf) and os.path.isfile(annhdr) and (not os.path.isfile(denovotablegz) or args.OVERWRITE == "true"):
		os.system("sort -k1,1 -k2,2n {0} -o {0} ".format(denovotable))
		os.system("bgzip {0}".format(denovotable))
		os.system("tabix -s1 -b2 -e2 {0}".format(denovotablegz))
		command = "bcftools annotate -a {0} -c CHROM,POS,PARENT,readsfather,readsmother,totalphasedreads,nrhaps,readsbyhap {1} -h {2} -o {3}".format(denovotablegz, denovovcf, annhdr, denovovcftemp)
		os.system(command)
		os.remove(denovovcf)
		os.rename(denovovcftemp, denovovcf)
		print "Annotated vcf file with the denovogear phasing output for sample: {0}".format(sample)
print "Finished with annotating the vcf files with the denovogear phasing output"

	
###End timer
timeend = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M")
print "Finished running script at: {0}".format(timeend)
end = timer()
execution_time = int(end - start)
execution_time = datetime.timedelta(seconds = execution_time)
print "Elapsed time: {0}".format(execution_time)
